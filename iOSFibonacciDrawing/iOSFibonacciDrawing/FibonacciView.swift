//
//  FibonacciView.swift
//  iOSFibonacciDrawing
//
//  Created by Byrdann Fox on 1/19/15.
//  Copyright (c) 2015 Byrdann Fox, Inc. All rights reserved.
//

import UIKit

class FibonacciView: UIView {

    /*
    // Only override drawRect: if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func drawRect(rect: CGRect) {
        // Drawing code
    }
    */
    
    // draw to the graphical context for the view object...
    // draw lines with paths(series of context points)...
    // automatically called...
    override func drawRect(rect: CGRect) {
        
        // since there's no need for mutation, optimize with a constant for instantiation...
        // create an instance of the class...
        let fibonacci = Fibonacci()
        
        // pass '16' as our argument to the fibonacci class' fibonacci method...
        var fiboSeqArr = fibonacci.fibonacciSequence(16)
        // reverse the elements of the array for opposite drawing values...
        var fiboSeqArrReverse = fiboSeqArr.reverse()
        
        // refer to the Fibonacci Class...
        var fiboDrawArr = fibonacci.fibonacciSequenceReversed(fiboSeqArrReverse.count, reversedArr: fiboSeqArrReverse, fiboArr: fiboSeqArr)
        
        // log the contents of the array...
        println(fiboDrawArr)
        
        // for every element in the fiboDrawArr array, execute the following statements...
        for x in fiboDrawArr {
            
            // (0,0) == ULO screen...
            // +x == right...
            // +y == bottom...
            
            // get the canvas/context...
            // height && width of the iOS device screen...
            let context = UIGraphicsGetCurrentContext()
            
            // determine the lines width size...
            CGContextSetLineWidth(context, 0.5)
            
            // start the point paths here...
            // 700, 400...
            // 500, 200...
            // 200, 200...
            CGContextMoveToPoint(context, 200, 200)
            
            // end the point paths here...
            // 300...
            // 100...
            CGContextAddLineToPoint(context, CGFloat(x), 100)
            // extend the current 'pen' position for design purposes...
            CGContextAddLineToPoint(context, CGFloat(-x), -100)
            
            // our lines color for Core Graphics to fill in...
            UIColor.purpleColor().set()
            
            // draw the line...
            CGContextStrokePath(context)
            
        }
        
    }

}